// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PassengerService.Data;

#nullable disable

namespace PassengerService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250505131903_UpdateModels")]
    partial class UpdateModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PassengerService.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookingId"));

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<decimal>("LuggageWeight")
                        .HasColumnType("numeric");

                    b.Property<bool>("PaidCheckin")
                        .HasColumnType("boolean");

                    b.Property<string>("Pnr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookingId");

                    b.HasIndex("FlightId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("PassengerService.Models.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FlightId"));

                    b.Property<string>("AircompanyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ArrivalPortCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeparturePortCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FlightStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FlightId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("PassengerService.Models.Passenger", b =>
                {
                    b.Property<string>("PassengerId")
                        .HasColumnType("text");

                    b.Property<int>("Apis")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CheckInStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Eticket")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaxNo")
                        .HasColumnType("integer");

                    b.Property<string>("PnrId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Remarks")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("SeatLayerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeatStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeatsOccupied")
                        .HasColumnType("integer");

                    b.HasKey("PassengerId");

                    b.HasIndex("BookingId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("PassengerService.Models.Booking", b =>
                {
                    b.HasOne("PassengerService.Models.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("PassengerService.Models.Passenger", b =>
                {
                    b.HasOne("PassengerService.Models.Booking", "Booking")
                        .WithMany("Passengers")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PassengerService.Models.PassengerDocument", "Document", b1 =>
                        {
                            b1.Property<string>("PassengerId")
                                .HasColumnType("text");

                            b1.Property<DateTime>("BirthDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("ExpiryDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("IssueCountryCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("NationalityCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PassengerId");

                            b1.ToTable("Passengers");

                            b1.WithOwner()
                                .HasForeignKey("PassengerId");
                        });

                    b.OwnsOne("PassengerService.Models.PassengerVisaDocument", "VisaDocument", b1 =>
                        {
                            b1.Property<string>("PassengerId")
                                .HasColumnType("text");

                            b1.Property<string>("ApplicCountryCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("BirthPlace")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("IssueDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("IssuePlace")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PassengerId");

                            b1.ToTable("Passengers");

                            b1.WithOwner()
                                .HasForeignKey("PassengerId");
                        });

                    b.Navigation("Booking");

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("VisaDocument")
                        .IsRequired();
                });

            modelBuilder.Entity("PassengerService.Models.Booking", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("PassengerService.Models.Flight", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
